/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visualaveraginglibrary;

import javax.swing.*;
import ensdf_datapoint.dataPt;
import averagingAlgorithms.*;
import java.util.ArrayList;
import java.util.List;
import java.io.IOException;
import text_io.textFileIO;
import java.util.function.BiFunction;
import java.io.File;

/**
 *
 * @author Michael
 */
public class VAveLib_GUI extends javax.swing.JFrame {

    /**
     * Creates new form VAveLib_GUI
     */
    public VAveLib_GUI() {
        initComponents();
        
        paramArray = new double[8];
        paramArray[0] = 95d; //critical chi^2 confidence
        paramArray[1] = 50d; //LWM max weight
        paramArray[2] = 0; //LWM outlier method
        paramArray[3] = 99d; //NRM outlier conf
        paramArray[4] = 1; //RT outlier confidence (0 = 95, 1 = 99, 2 = 99.99)
        paramArray[5] = 800000; //number of bootstrap sub-sample medians
        paramArray[6] = 0.010d; //mandel-pauli numeric tolarance
        paramArray[7] = 1000; //mandel-pauli max iterations
        
        
        inputBoxes = new ArrayList<>();
        inputScrollPanes = new ArrayList<>();
        dataSetCheckBoxes  = new ArrayList<>();
        
        createInputBox("Data_set_1");
        
        jTabbedPane1.setComponentPopupMenu(tabsPopupMenu);
        tabsPopupMenu.add(removeDataSetMenuItem);
        tabsPopupMenu.add(renameDataSetMenuItem);
        
        reportFileButton.setEnabled(false);
        rptFilePath = "";
        plotDirectory = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsPopupMenu = new javax.swing.JPopupMenu();
        removeDataSetMenuItem = new javax.swing.JMenuItem();
        renameDataSetMenuItem = new javax.swing.JMenuItem();
        loadDataSetFileChooser = new javax.swing.JFileChooser();
        averagesButtonGroup = new javax.swing.ButtonGroup();
        yesNobuttonGroup = new javax.swing.ButtonGroup();
        exportDataFileChooser = new javax.swing.JFileChooser();
        reportFileChooser = new javax.swing.JFileChooser();
        plotDirChooser = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        newDataSetButton = new javax.swing.JButton();
        LoadDataButton = new javax.swing.JButton();
        OutlierButton = new javax.swing.JButton();
        uwtaveButton = new javax.swing.JButton();
        wtaveButton = new javax.swing.JButton();
        lwmButton = new javax.swing.JButton();
        nrmButton = new javax.swing.JButton();
        rtButton = new javax.swing.JButton();
        evmButton = new javax.swing.JButton();
        bootstrapButton = new javax.swing.JButton();
        mpButton = new javax.swing.JButton();
        compareButton = new javax.swing.JButton();
        instructionText = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenuButton = new javax.swing.JMenu();
        saveReportMenu = new javax.swing.JMenu();
        yesReportRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        noReportRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        reportFileButton = new javax.swing.JMenuItem();
        exportDataButton = new javax.swing.JMenuItem();
        plottingMenu = new javax.swing.JMenu();
        generatePlotScriptMenuItem = new javax.swing.JMenuItem();
        resetPlotDirMenuItem = new javax.swing.JMenuItem();
        averageToPlotMenu = new javax.swing.JMenu();
        UnWtAvRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        wtAvRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        lwmRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        nrmRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        rtRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        evmRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        bootstrapRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        mpRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        multiAnalysisMenu = new javax.swing.JMenu();
        allDataSetsCheck = new javax.swing.JCheckBoxMenuItem();
        parametersMenu = new javax.swing.JMenu();
        showParametersMenuButton = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        roundingCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        showAboutButton = new javax.swing.JMenuItem();

        removeDataSetMenuItem.setText("Remove Data Set");
        removeDataSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDataSetMenuItemActionPerformed(evt);
            }
        });

        renameDataSetMenuItem.setText("Rname Data Set");
        renameDataSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameDataSetMenuItemActionPerformed(evt);
            }
        });

        exportDataFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        reportFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        plotDirChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        plotDirChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visual Averaging Library");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        newDataSetButton.setText("New Data Set");
        newDataSetButton.setMaximumSize(new java.awt.Dimension(190, 23));
        newDataSetButton.setMinimumSize(new java.awt.Dimension(190, 23));
        newDataSetButton.setPreferredSize(new java.awt.Dimension(190, 23));
        newDataSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDataSetButtonActionPerformed(evt);
            }
        });

        LoadDataButton.setText("Load Data From File");
        LoadDataButton.setMaximumSize(new java.awt.Dimension(190, 23));
        LoadDataButton.setMinimumSize(new java.awt.Dimension(190, 23));
        LoadDataButton.setPreferredSize(new java.awt.Dimension(190, 23));
        LoadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDataButtonActionPerformed(evt);
            }
        });

        OutlierButton.setText("Check for Outliers");
        OutlierButton.setMaximumSize(new java.awt.Dimension(190, 23));
        OutlierButton.setMinimumSize(new java.awt.Dimension(190, 23));
        OutlierButton.setPreferredSize(new java.awt.Dimension(190, 23));
        OutlierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutlierButtonActionPerformed(evt);
            }
        });

        uwtaveButton.setText("Unweighted Average");
        uwtaveButton.setMaximumSize(new java.awt.Dimension(190, 23));
        uwtaveButton.setMinimumSize(new java.awt.Dimension(190, 23));
        uwtaveButton.setPreferredSize(new java.awt.Dimension(190, 23));
        uwtaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uwtaveButtonActionPerformed(evt);
            }
        });

        wtaveButton.setText("Weighted Average");
        wtaveButton.setMaximumSize(new java.awt.Dimension(190, 23));
        wtaveButton.setMinimumSize(new java.awt.Dimension(190, 23));
        wtaveButton.setPreferredSize(new java.awt.Dimension(190, 23));
        wtaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wtaveButtonActionPerformed(evt);
            }
        });

        lwmButton.setText("Limit. of Stat. Weights (LWM)");
        lwmButton.setMaximumSize(new java.awt.Dimension(190, 23));
        lwmButton.setMinimumSize(new java.awt.Dimension(190, 23));
        lwmButton.setPreferredSize(new java.awt.Dimension(190, 23));
        lwmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lwmButtonActionPerformed(evt);
            }
        });

        nrmButton.setText("Normalized Residuals (NRM)");
        nrmButton.setMaximumSize(new java.awt.Dimension(190, 23));
        nrmButton.setMinimumSize(new java.awt.Dimension(190, 23));
        nrmButton.setPreferredSize(new java.awt.Dimension(190, 23));
        nrmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nrmButtonActionPerformed(evt);
            }
        });

        rtButton.setText("Rajeval Technique (RT)");
        rtButton.setMaximumSize(new java.awt.Dimension(190, 23));
        rtButton.setMinimumSize(new java.awt.Dimension(190, 23));
        rtButton.setPreferredSize(new java.awt.Dimension(190, 23));
        rtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtButtonActionPerformed(evt);
            }
        });

        evmButton.setText("Expected Value Method (EVM)");
        evmButton.setMaximumSize(new java.awt.Dimension(190, 23));
        evmButton.setMinimumSize(new java.awt.Dimension(190, 23));
        evmButton.setPreferredSize(new java.awt.Dimension(190, 23));
        evmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evmButtonActionPerformed(evt);
            }
        });

        bootstrapButton.setText("Bootstrap");
        bootstrapButton.setMaximumSize(new java.awt.Dimension(190, 23));
        bootstrapButton.setMinimumSize(new java.awt.Dimension(190, 23));
        bootstrapButton.setPreferredSize(new java.awt.Dimension(190, 23));
        bootstrapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootstrapButtonActionPerformed(evt);
            }
        });

        mpButton.setText("Mandel-Paule (MP)");
        mpButton.setMaximumSize(new java.awt.Dimension(190, 23));
        mpButton.setMinimumSize(new java.awt.Dimension(190, 23));
        mpButton.setPreferredSize(new java.awt.Dimension(190, 23));
        mpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpButtonActionPerformed(evt);
            }
        });

        compareButton.setText("Compare");
        compareButton.setMaximumSize(new java.awt.Dimension(190, 23));
        compareButton.setMinimumSize(new java.awt.Dimension(190, 23));
        compareButton.setPreferredSize(new java.awt.Dimension(190, 23));
        compareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareButtonActionPerformed(evt);
            }
        });

        instructionText.setText("<html> Enter the data with the uncertainty in parentheses, representing the error on the last significant digits (i.e. in the 'ENSDF' format). The uncertainty can also be separated from the central value using a space (' ') instead of enclosed in parentheses. Asymmetric uncertainties can be entered by giving a '+' before the upper uncertainty and a '-' before the lower uncertainty. Do not put a space between the upper and lower uncertainties.  A name can be given to a point by typing it before the point and separating it with a colon (e.g. Example:10.7(+23-15)). Enter only one measurement per line. Points can be excluded from the analysis by putting a hash (#) symbol at the beginning of the line. </html>");
        instructionText.setMaximumSize(new java.awt.Dimension(500, 500));
        instructionText.setPreferredSize(new java.awt.Dimension(350, 100));

        fileMenuButton.setText("File");

        saveReportMenu.setText("Save Report?");

        yesNobuttonGroup.add(yesReportRadioButtonMenuItem);
        yesReportRadioButtonMenuItem.setText("Yes");
        yesReportRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesReportRadioButtonMenuItemActionPerformed(evt);
            }
        });
        saveReportMenu.add(yesReportRadioButtonMenuItem);

        yesNobuttonGroup.add(noReportRadioButtonMenuItem);
        noReportRadioButtonMenuItem.setSelected(true);
        noReportRadioButtonMenuItem.setText("No");
        noReportRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noReportRadioButtonMenuItemActionPerformed(evt);
            }
        });
        saveReportMenu.add(noReportRadioButtonMenuItem);

        fileMenuButton.add(saveReportMenu);

        reportFileButton.setText("Choose file...");
        reportFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportFileButtonActionPerformed(evt);
            }
        });
        fileMenuButton.add(reportFileButton);

        exportDataButton.setText("Export Data");
        exportDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDataButtonActionPerformed(evt);
            }
        });
        fileMenuButton.add(exportDataButton);

        jMenuBar1.add(fileMenuButton);

        plottingMenu.setText("Point View");

        generatePlotScriptMenuItem.setText("Generate GNU Plot Script");
        generatePlotScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePlotScriptMenuItemActionPerformed(evt);
            }
        });
        plottingMenu.add(generatePlotScriptMenuItem);

        resetPlotDirMenuItem.setText("Change Plotting Directory");
        resetPlotDirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPlotDirMenuItemActionPerformed(evt);
            }
        });
        plottingMenu.add(resetPlotDirMenuItem);

        averageToPlotMenu.setText("Avergae to display on plot");

        averagesButtonGroup.add(UnWtAvRadioButtonMenuItem);
        UnWtAvRadioButtonMenuItem.setText("Unweighted Average");
        UnWtAvRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnWtAvRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(UnWtAvRadioButtonMenuItem);

        averagesButtonGroup.add(wtAvRadioButtonMenuItem);
        wtAvRadioButtonMenuItem.setSelected(true);
        wtAvRadioButtonMenuItem.setText("Weighted Average");
        wtAvRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wtAvRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(wtAvRadioButtonMenuItem);

        averagesButtonGroup.add(lwmRadioButtonMenuItem);
        lwmRadioButtonMenuItem.setText("LWM");
        lwmRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lwmRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(lwmRadioButtonMenuItem);

        averagesButtonGroup.add(nrmRadioButtonMenuItem);
        nrmRadioButtonMenuItem.setText("NRM");
        nrmRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nrmRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(nrmRadioButtonMenuItem);

        averagesButtonGroup.add(rtRadioButtonMenuItem);
        rtRadioButtonMenuItem.setText("RT");
        rtRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(rtRadioButtonMenuItem);

        averagesButtonGroup.add(evmRadioButtonMenuItem);
        evmRadioButtonMenuItem.setText("EVM");
        evmRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evmRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(evmRadioButtonMenuItem);

        averagesButtonGroup.add(bootstrapRadioButtonMenuItem);
        bootstrapRadioButtonMenuItem.setText("Bootstrap");
        bootstrapRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootstrapRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(bootstrapRadioButtonMenuItem);

        averagesButtonGroup.add(mpRadioButtonMenuItem);
        mpRadioButtonMenuItem.setText("MP");
        mpRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpRadioButtonMenuItemActionPerformed(evt);
            }
        });
        averageToPlotMenu.add(mpRadioButtonMenuItem);

        plottingMenu.add(averageToPlotMenu);

        jMenuBar1.add(plottingMenu);

        multiAnalysisMenu.setText("Multiple Data Set Analysis");

        allDataSetsCheck.setText("All data sets");
        allDataSetsCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                allDataSetsCheckStateChanged(evt);
            }
        });
        multiAnalysisMenu.add(allDataSetsCheck);

        jMenuBar1.add(multiAnalysisMenu);

        parametersMenu.setText("Method Parameters");

        showParametersMenuButton.setText("Show Parameters Window");
        showParametersMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showParametersMenuButtonActionPerformed(evt);
            }
        });
        parametersMenu.add(showParametersMenuButton);

        jMenuBar1.add(parametersMenu);

        optionsMenu.setText("Options");

        roundingCheckBoxMenuItem.setText("Round result to be no more precise than input data");
        optionsMenu.add(roundingCheckBoxMenuItem);

        jMenuBar1.add(optionsMenu);

        aboutMenu.setText("About");

        showAboutButton.setText("Show About Window");
        showAboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAboutButtonActionPerformed(evt);
            }
        });
        aboutMenu.add(showAboutButton);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instructionText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(LoadDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(OutlierButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(uwtaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(wtaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lwmButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nrmButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(evmButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bootstrapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(compareButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(newDataSetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructionText, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(newDataSetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OutlierButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uwtaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wtaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lwmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nrmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rtButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(evmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bootstrapButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(mpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compareButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void createInputBox(String title){
        inputBoxes.add(new javax.swing.JTextArea());
        inputBoxes.get(inputBoxes.size() - 1).setColumns(20);
        inputBoxes.get(inputBoxes.size() - 1).setFont(new java.awt.Font("Monospaced", 0, 18));
        inputBoxes.get(inputBoxes.size() - 1).setRows(5);
        
        inputScrollPanes.add(new javax.swing.JScrollPane());
        inputScrollPanes.get(inputScrollPanes.size() - 1).setViewportView(inputBoxes.get(inputBoxes.size() - 1));
        
        dataSetCheckBoxes.add(new javax.swing.JCheckBoxMenuItem());
        if(allDataSetsCheck.getState()){
            dataSetCheckBoxes.get(dataSetCheckBoxes.size() - 1).setSelected(true);
        }
        dataSetCheckBoxes.get(dataSetCheckBoxes.size() - 1).setText(title);
        multiAnalysisMenu.add(dataSetCheckBoxes.get(dataSetCheckBoxes.size() - 1));
        
        jTabbedPane1.addTab(title, inputScrollPanes.get(inputScrollPanes.size() - 1));
    }
    
    private void removeInputBox(int ind){
        jTabbedPane1.remove(inputScrollPanes.get(ind));
        multiAnalysisMenu.remove(dataSetCheckBoxes.get(ind));
        dataSetCheckBoxes.remove(ind);
        inputScrollPanes.remove(ind);
        inputBoxes.remove(ind);
    }
    
    private void newDataSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDataSetButtonActionPerformed
        createInputBox("Data_set_" + String.valueOf(jTabbedPane1.getTabCount() + 1));
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount() - 1);
    }//GEN-LAST:event_newDataSetButtonActionPerformed

    private void parseInputDataFile(List<String> input){
        String currentText;
        String newTitle;
        int ind;
        newDataSetButtonActionPerformed(null); //new data set
        
        ind = jTabbedPane1.getSelectedIndex();
        for(String line : input){
            if(line.toLowerCase().contains("title=")){ //set title
                newTitle = line.substring(line.toLowerCase().indexOf("title=")+6).trim();
                jTabbedPane1.setTitleAt(ind, newTitle);
                dataSetCheckBoxes.get(ind).setText(newTitle);
            }else if(line.trim().equalsIgnoreCase("*new")){ //make new data set
                newDataSetButtonActionPerformed(null);
                ind = jTabbedPane1.getSelectedIndex();
            }else{
                currentText = inputBoxes.get(jTabbedPane1.getSelectedIndex()).getText();
                inputBoxes.get(jTabbedPane1.getSelectedIndex()).setText(currentText + "\n" + line);
            }
        }
    }
    
    private void LoadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDataButtonActionPerformed
        List<String> input;
        
        loadDataSetFileChooser.showDialog(this, "Open");
        try{
            input = textFileIO.read(loadDataSetFileChooser.getSelectedFile().getAbsolutePath());
            parseInputDataFile(input);
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, "IO Error: " + e.getMessage());
        }
    }//GEN-LAST:event_LoadDataButtonActionPerformed

    private void OutlierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutlierButtonActionPerformed
        String data;
        dataPt[] dataset;
        
        data = inputBoxes.get(jTabbedPane1.getSelectedIndex()).getText();
        dataset = VAveLib_GUI_methods.createDataset(data);
        
        if(dataset == null){
            return;
        }
        if(dataset.length <= 2){
            JOptionPane.showMessageDialog(null, "Not enough data points to check for outliers!");
            return;
        }
        outliersWindow outlierForm = new outliersWindow(this, true, dataset, data, this);
        outlierForm.setVisible(true);
    }//GEN-LAST:event_OutlierButtonActionPerformed

    private void saveReport(averagingReport rpt, boolean append){
        if(yesReportRadioButtonMenuItem.isSelected()){
            if(rptFilePath.equals("")){
                JOptionPane.showMessageDialog(null, "Choose file to save report.");
                reportFileButtonActionPerformed(null);
            }
            try{
                textFileIO.write(rpt.fullReport(), reportFileChooser.getSelectedFile().getPath(), append);
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, "IO Error: " + e.getMessage());
            }
        }
    }
    
    private void saveReport(String[] s, boolean append){
        if(yesReportRadioButtonMenuItem.isSelected()){
            if(rptFilePath.equals("")){
                JOptionPane.showMessageDialog(null, "Choose file to save report.");
                reportFileButtonActionPerformed(null);
            }
            try{
                textFileIO.write(s, reportFileChooser.getSelectedFile().getPath(), append);
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, "IO Error: " + e.getMessage());
            }
        }
    }
    
    private void doAverage(BiFunction<dataPt[], averagingReport, dataPt> average){
        int ind;
        String data;
        dataPt[] dataset;
        dataPt result;
        averagingReport rpt;
        int count;
        
        count = 0;
        for(ind=0; ind<dataSetCheckBoxes.size(); ind++){
            if(dataSetCheckBoxes.get(ind).isSelected()){
                count += 1;
                data = inputBoxes.get(ind).getText();
                dataset = VAveLib_GUI_methods.createDataset(data);
                if(dataset == null){
                    return;
                }
                rpt = new averagingReport();
                result = average.apply(dataset, rpt);
                rpt.dataSetName = dataSetCheckBoxes.get(ind).getText();
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, count > 1); //overwrite previous report, but append if more than one data set analysed
                JOptionPane.showMessageDialog(null, rpt.briefReport(result));
            }
        }
        showReport();
    }
    
    private void showReport(){
        if(!rptFilePath.equals("")){
            JFrame frame = new JFrame();
            javax.swing.JTextArea rptTextbox = new javax.swing.JTextArea();
            javax.swing.JScrollPane scrollbars = new javax.swing.JScrollPane();
            try{
                String thetext = "";
                List<String> lines = textFileIO.read(rptFilePath);
                for(String s : lines){
                    thetext += s + "\n";
                }
                rptTextbox.setText(thetext);
            }catch(IOException e){
                return;
            }
            rptTextbox.setFont(new java.awt.Font("Monospaced", 0, 18));
            rptTextbox.setEditable(false);
            scrollbars.setViewportView(rptTextbox);
            
            frame.getContentPane().add(scrollbars, java.awt.BorderLayout.CENTER);
            frame.setSize(400, 400);
            frame.setVisible(true);
        }
    }
    
    private void uwtaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uwtaveButtonActionPerformed
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.unweightedAverage(dataset, rpt));
    }//GEN-LAST:event_uwtaveButtonActionPerformed

    private void wtaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wtaveButtonActionPerformed
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.weightedAverage(dataset, rpt));
    }//GEN-LAST:event_wtaveButtonActionPerformed

    private void lwmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lwmButtonActionPerformed
        double weightLimit;
        int outlierMethod;
        double confidenceLevel;
        
        weightLimit = paramArray[1]/100d;
        outlierMethod = (int) paramArray[2];
        confidenceLevel = paramArray[0];
        
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.lwm(dataset, weightLimit, 
                        outlierMethod, confidenceLevel, rpt));
    }//GEN-LAST:event_lwmButtonActionPerformed

    private void nrmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nrmButtonActionPerformed
        double confidenceLevel;
        
        confidenceLevel = paramArray[3]/100d;
        
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.nrm(dataset, confidenceLevel, rpt));
    }//GEN-LAST:event_nrmButtonActionPerformed

    private void rtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtButtonActionPerformed
        int outlierConfidenceLevel;
        
        outlierConfidenceLevel = 1 + (int) paramArray[4];
        
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.rt(dataset, outlierConfidenceLevel, rpt));
    }//GEN-LAST:event_rtButtonActionPerformed

    private void evmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evmButtonActionPerformed
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.evm(dataset, rpt));
    }//GEN-LAST:event_evmButtonActionPerformed

    private void bootstrapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bootstrapButtonActionPerformed
        int NUM_MEDIANS;
        
        NUM_MEDIANS = (int) paramArray[5];
        
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.bootstrap(dataset, NUM_MEDIANS, rpt));
    }//GEN-LAST:event_bootstrapButtonActionPerformed

    private void mpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpButtonActionPerformed
        int maxIt;
        double precision;
        
        precision = paramArray[6];
        maxIt = (int) paramArray[7];
        
        doAverage((dataPt[] dataset, averagingReport rpt) -> 
                averagingMethods.mp(dataset, precision, maxIt, rpt));
    }//GEN-LAST:event_mpButtonActionPerformed

    private void compareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareButtonActionPerformed
        int ind;
        String data;
        dataPt[] dataset;
        dataPt result;
        averagingReport rpt;
        int count;
        String[] tmp;
        String message;
        double weightLimit;
        int outlierMethod;
        double confidenceLevel;
        int outlierConfidenceLevel;
        int NUM_MEDIANS;
        int maxIt;
        double precision;
        
        precision = paramArray[6];
        maxIt = (int) paramArray[7];

        
        NUM_MEDIANS = (int) paramArray[5];
        
        outlierConfidenceLevel = 1 + (int) paramArray[4];
        
        weightLimit = paramArray[1]/100d;
        outlierMethod = (int) paramArray[2];
        confidenceLevel = paramArray[0];
        
        count = 0;
        tmp = new String[1];
        for(ind=0; ind<dataSetCheckBoxes.size(); ind++){
            if(dataSetCheckBoxes.get(ind).isSelected()){
                count += 1;
                data = inputBoxes.get(ind).getText();
                dataset = VAveLib_GUI_methods.createDataset(data);
                if(dataset == null){
                    return;
                }
                rpt = new averagingReport();
                rpt.dataSetName = dataSetCheckBoxes.get(ind).getText();
                tmp[0] = rpt.dataSetHeader();
                message = tmp[0];
                 //overwrite previous report, but append if more than one data set analysed
                saveReport(tmp, count > 1);
                
                rpt = new averagingReport();
                result = averagingMethods.unweightedAverage(dataset, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.weightedAverage(dataset, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.lwm(dataset, weightLimit, outlierMethod, confidenceLevel, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.nrm(dataset, paramArray[3]/100d, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.rt(dataset, outlierConfidenceLevel, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.evm(dataset, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.bootstrap(dataset, NUM_MEDIANS, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                rpt = new averagingReport();
                result = averagingMethods.mp(dataset, precision, maxIt, rpt);
                if(roundingCheckBoxMenuItem.isSelected()){
                    result.setMinDisplayPlace(String.valueOf(VAveLib_GUI_methods.leastSigFig(data)));
                }
                saveReport(rpt, true);
                message += rpt.briefReport(result) + "\n";
                
                
                rpt.dataSetName = dataSetCheckBoxes.get(ind).getText();
                tmp[0] = rpt.dataSetFooter();
                message += tmp[0];
                saveReport(tmp, true);
                JOptionPane.showMessageDialog(null, message);
            }
        }
        showReport();
    }//GEN-LAST:event_compareButtonActionPerformed

    private void exportDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDataButtonActionPerformed
        String data;
        List<String> exportData;
        dataPt[] dataset;
        int i;
        
        exportDataFileChooser.showSaveDialog(this);
        
        data = inputBoxes.get(jTabbedPane1.getSelectedIndex()).getText();
        dataset = VAveLib_GUI_methods.createDataset(data);
        exportData = new ArrayList<>();
        
        for(i=0; i<dataset.length; i++){
            exportData.add(String.valueOf(dataset[i].getValue()) + "\t" + 
                    String.valueOf(dataset[i].getUpper()) + "\t" + 
                    String.valueOf(dataset[i].getLower()));
        }
        
        try{
            textFileIO.write(exportData, exportDataFileChooser.getSelectedFile().getPath());
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, "IO Error: " + e.getMessage());
        }
    }//GEN-LAST:event_exportDataButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        int ind; // selected index
        int i;
        
        if(jTabbedPane1.getTabCount() == 0){
            return;
        }
        
        ind = jTabbedPane1.getSelectedIndex();
        
        if(allDataSetsCheck.getState()){
            // nothing needs to happen since all datasets will be analyzed
        }else{
            for(i=0; i<dataSetCheckBoxes.size(); i++){
                dataSetCheckBoxes.get(i).setSelected(false);
            }
            dataSetCheckBoxes.get(ind).setSelected(true);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged
	
    private void allDataSetsCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_allDataSetsCheckStateChanged
        int i;
        
        if(allDataSetsCheck.getState()){
            for(i=0; i<dataSetCheckBoxes.size(); i++){
                dataSetCheckBoxes.get(i).setSelected(true);
                dataSetCheckBoxes.get(i).setEnabled(false);
            }
        }else{
            for(i=0; i<dataSetCheckBoxes.size(); i++){
                dataSetCheckBoxes.get(i).setSelected(false);
                dataSetCheckBoxes.get(i).setEnabled(true);
            }
            dataSetCheckBoxes.get(jTabbedPane1.getSelectedIndex()).setSelected(true);
        }
    }//GEN-LAST:event_allDataSetsCheckStateChanged

    private void showParametersMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showParametersMenuButtonActionPerformed
        parametersWindow parameterForm = new parametersWindow(this);
        parameterForm.setVisible(true);
    }//GEN-LAST:event_showParametersMenuButtonActionPerformed

    private void removeDataSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataSetMenuItemActionPerformed
        removeInputBox(jTabbedPane1.getSelectedIndex());
        dataSetCheckBoxes.get(jTabbedPane1.getSelectedIndex()).setSelected(true);
    }//GEN-LAST:event_removeDataSetMenuItemActionPerformed

    private void renameDataSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameDataSetMenuItemActionPerformed
        int ind = jTabbedPane1.getSelectedIndex();
        String newTitle = JOptionPane.showInputDialog(null, 
                "Eneter the new title:",
                dataSetCheckBoxes.get(ind).getText());
        if(newTitle == null){
            return;
        }
        if(!newTitle.trim().equals("")){
            dataSetCheckBoxes.get(ind).setText(newTitle);
            jTabbedPane1.setTitleAt(ind, newTitle);
        }
    }//GEN-LAST:event_renameDataSetMenuItemActionPerformed

    private void yesReportRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesReportRadioButtonMenuItemActionPerformed
        saveReportMenu.doClick();
        if(yesReportRadioButtonMenuItem.isSelected()){
            reportFileButton.setEnabled(true);
        }else{
            reportFileButton.setEnabled(false);
        }
    }//GEN-LAST:event_yesReportRadioButtonMenuItemActionPerformed

    private void noReportRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noReportRadioButtonMenuItemActionPerformed
        saveReportMenu.doClick();
        if(yesReportRadioButtonMenuItem.isSelected()){
            reportFileButton.setEnabled(true);
        }else{
            reportFileButton.setEnabled(false);
        }
    }//GEN-LAST:event_noReportRadioButtonMenuItemActionPerformed

    private void reportFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportFileButtonActionPerformed
        reportFileChooser.showSaveDialog(this);
        reportFileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        reportFileChooser.setAcceptAllFileFilterUsed(true);
        rptFilePath = reportFileChooser.getSelectedFile().getAbsolutePath();
        reportFileButton.setText("Current file: " + rptFilePath);
        
    }//GEN-LAST:event_reportFileButtonActionPerformed

    private void showAboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAboutButtonActionPerformed
        aboutWindow aboutForm = new aboutWindow(this, false);
        aboutForm.setVisible(true);
    }//GEN-LAST:event_showAboutButtonActionPerformed

    private void setPlotDirectory(){
        int chooserStatus;
        File file;
        
        while(plotDirectory.equals("")){
            chooserStatus = plotDirChooser.showSaveDialog(this);
            if(chooserStatus == javax.swing.JFileChooser.CANCEL_OPTION){
                plotDirectory = "";
                return;
            }
            plotDirectory = plotDirChooser.getSelectedFile().getAbsolutePath();
            file = new File(plotDirectory);
            if(!file.isDirectory()){
                JOptionPane.showMessageDialog(null, "Please choose a DIRECTORY, not a file.");
                plotDirectory = "";
            }
        }
    }
    
    private void generatePlotScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePlotScriptMenuItemActionPerformed
        List<String> dataFile, scriptFile;
        String data, title;
        dataPt[] dataset;
        Boolean longNames;
        
        double weightLimit;
        int outlierMethod;
        double confidenceLevel;
        int outlierConfidenceLevel;
        int NUM_MEDIANS;
        int maxIt;
        double precision;
        dataPt result;

        precision = paramArray[6];
        maxIt = (int) paramArray[7];

        
        NUM_MEDIANS = (int) paramArray[5];
        
        outlierConfidenceLevel = 1 + (int) paramArray[4];
        
        weightLimit = paramArray[1]/100d;
        outlierMethod = (int) paramArray[2];
        confidenceLevel = paramArray[0];
        
        if(plotDirectory.equals("")){
            JOptionPane.showMessageDialog(null, "Choose a directory to save plotting files.");
            setPlotDirectory();
        }
        if(plotDirectory.equals("")){
            return;
        }
        
        data = inputBoxes.get(jTabbedPane1.getSelectedIndex()).getText();
        title = dataSetCheckBoxes.get(jTabbedPane1.getSelectedIndex()).getText();
        dataset = VAveLib_GUI_methods.createDataset(data);
        if(dataset == null){
            return;
        }
        
        longNames = false;
        for(dataPt d : dataset){
            if(d.getName().length() > 3){
                longNames = true;
                break;
            }
        }

        dataFile = plotting.generateDataFile(dataset);
        if(UnWtAvRadioButtonMenuItem.isSelected()){
            result = averagingMethods.unweightedAverage(dataset);
        }else if(lwmRadioButtonMenuItem.isSelected()){
            result = averagingMethods.lwm(dataset, weightLimit, outlierMethod, confidenceLevel, null);
        }else if(nrmRadioButtonMenuItem.isSelected()){
            result = averagingMethods.nrm(dataset, paramArray[3]/100d, null);
        }else if(rtRadioButtonMenuItem.isSelected()){
            result = averagingMethods.rt(dataset, outlierConfidenceLevel, null);
        }else if(evmRadioButtonMenuItem.isSelected()){
            result = averagingMethods.evm(dataset);
        }else if(bootstrapRadioButtonMenuItem.isSelected()){
            result = averagingMethods.bootstrap(dataset, NUM_MEDIANS, null);
        }else if(mpRadioButtonMenuItem.isSelected()){
            result = averagingMethods.mp(dataset, precision, maxIt, null);
        }else{
            result = averagingMethods.weightedAverage(dataset);
        }
        scriptFile = plotting.generateScript(result, title, longNames);
        try{
            textFileIO.write(dataFile, plotDirectory + "/" + title + "_data.dat");
            textFileIO.write(scriptFile, plotDirectory + "/" + title + "_script.p");
            JOptionPane.showMessageDialog(null, "Gnuplot data and script files generated successfully.");
            makeAndShowPlot(title);
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, "I/O Error! Files could not be written.\n" +
                e.getMessage(),  "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_generatePlotScriptMenuItemActionPerformed

    private void makeAndShowPlot(String title){
        Runtime rt = Runtime.getRuntime();
        Process pr;
        File plotImageFile;
        java.awt.Image plotImage;
        
        try{
            pr = rt.exec("gnuplot \"" + title + "_script.p\"", null, new File(plotDirectory));
            pr.waitFor();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }catch(InterruptedException intr){
            
        }
        plotImageFile = new File(plotDirectory + "/" + title + ".png");
        if(plotImageFile.exists() && !plotImageFile.isDirectory()){
            try{
                plotImage = javax.imageio.ImageIO.read(plotImageFile);
                
                JFrame frame = new JFrame();

                JLabel lblimage = new JLabel(new ImageIcon(plotImage));
                frame.getContentPane().add(lblimage, java.awt.BorderLayout.CENTER);
                frame.setSize(plotImage.getWidth(null), plotImage.getHeight(null));
                frame.setVisible(true);
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Plot image not created successfully. Please ensure that gnuplot is included in your path environment variable of your operating system.",
                    "Plot not created", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void UnWtAvRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnWtAvRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_UnWtAvRadioButtonMenuItemActionPerformed

    private void lwmRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lwmRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_lwmRadioButtonMenuItemActionPerformed

    private void nrmRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nrmRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_nrmRadioButtonMenuItemActionPerformed

    private void rtRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_rtRadioButtonMenuItemActionPerformed

    private void evmRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evmRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_evmRadioButtonMenuItemActionPerformed

    private void bootstrapRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bootstrapRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_bootstrapRadioButtonMenuItemActionPerformed

    private void mpRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_mpRadioButtonMenuItemActionPerformed

    private void wtAvRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wtAvRadioButtonMenuItemActionPerformed
        averageToPlotMenu.doClick();
    }//GEN-LAST:event_wtAvRadioButtonMenuItemActionPerformed

    private void resetPlotDirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPlotDirMenuItemActionPerformed
        plotDirectory = "";
        setPlotDirectory();
    }//GEN-LAST:event_resetPlotDirMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VAveLib_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VAveLib_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VAveLib_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VAveLib_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VAveLib_GUI().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoadDataButton;
    private javax.swing.JButton OutlierButton;
    private javax.swing.JRadioButtonMenuItem UnWtAvRadioButtonMenuItem;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JCheckBoxMenuItem allDataSetsCheck;
    private javax.swing.JMenu averageToPlotMenu;
    private javax.swing.ButtonGroup averagesButtonGroup;
    private javax.swing.JButton bootstrapButton;
    private javax.swing.JRadioButtonMenuItem bootstrapRadioButtonMenuItem;
    private javax.swing.JButton compareButton;
    private javax.swing.JButton evmButton;
    private javax.swing.JRadioButtonMenuItem evmRadioButtonMenuItem;
    private javax.swing.JMenuItem exportDataButton;
    private javax.swing.JFileChooser exportDataFileChooser;
    private javax.swing.JMenu fileMenuButton;
    private javax.swing.JMenuItem generatePlotScriptMenuItem;
    private javax.swing.JLabel instructionText;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JFileChooser loadDataSetFileChooser;
    private javax.swing.JButton lwmButton;
    private javax.swing.JRadioButtonMenuItem lwmRadioButtonMenuItem;
    private javax.swing.JButton mpButton;
    private javax.swing.JRadioButtonMenuItem mpRadioButtonMenuItem;
    private javax.swing.JMenu multiAnalysisMenu;
    private javax.swing.JButton newDataSetButton;
    private javax.swing.JRadioButtonMenuItem noReportRadioButtonMenuItem;
    private javax.swing.JButton nrmButton;
    private javax.swing.JRadioButtonMenuItem nrmRadioButtonMenuItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenu parametersMenu;
    private javax.swing.JFileChooser plotDirChooser;
    private javax.swing.JMenu plottingMenu;
    private javax.swing.JMenuItem removeDataSetMenuItem;
    private javax.swing.JMenuItem renameDataSetMenuItem;
    private javax.swing.JMenuItem reportFileButton;
    private javax.swing.JFileChooser reportFileChooser;
    private javax.swing.JMenuItem resetPlotDirMenuItem;
    private javax.swing.JCheckBoxMenuItem roundingCheckBoxMenuItem;
    private javax.swing.JButton rtButton;
    private javax.swing.JRadioButtonMenuItem rtRadioButtonMenuItem;
    private javax.swing.JMenu saveReportMenu;
    private javax.swing.JMenuItem showAboutButton;
    private javax.swing.JMenuItem showParametersMenuButton;
    private javax.swing.JPopupMenu tabsPopupMenu;
    private javax.swing.JButton uwtaveButton;
    private javax.swing.JRadioButtonMenuItem wtAvRadioButtonMenuItem;
    private javax.swing.JButton wtaveButton;
    private javax.swing.ButtonGroup yesNobuttonGroup;
    private javax.swing.JRadioButtonMenuItem yesReportRadioButtonMenuItem;
    // End of variables declaration//GEN-END:variables

    public List<javax.swing.JTextArea> inputBoxes;
    private List<javax.swing.JScrollPane> inputScrollPanes;
    private List<javax.swing.JCheckBoxMenuItem> dataSetCheckBoxes;
    public double[] paramArray;
    private String rptFilePath;
    private String plotDirectory;
}
